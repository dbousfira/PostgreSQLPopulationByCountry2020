DROP TABLE IF EXISTS country;
CREATE TABLE country(
   country VARCHAR(24) PRIMARY KEY,
   density INTEGER
);
/* Insert data keeping only country name and density that ar only needed for the project and to respect 3FN */
INSERT INTO country(country, density) VALUES
    ('China', 153),
    ('India', 464),
    ('United States', 36),
    ('Indonesia', 151),
    ('Pakistan', 287),
    ('Brazil', 25),
    ('Nigeria', 226),
    ('Bangladesh', 1265),
    ('Russia', 9),
    ('Mexico', 66),
    ('Japan', 347),
    ('Ethiopia', 115),
    ('Philippines', 368),
    ('Egypt', 103),
    ('Vietnam', 314),
    ('DR Congo', 40),
    ('Turkey', 110),
    ('Iran', 52),
    ('Germany', 240),
    ('Thailand', 137),
    ('United Kingdom', 281),
    ('France', 119),
    ('Italy', 206),
    ('Tanzania', 67),
    ('South Africa', 49),
    ('Myanmar', 83),
    ('Kenya', 94),
    ('South Korea', 527),
    ('Colombia', 46),
    ('Spain', 94),
    ('Uganda', 229),
    ('Argentina', 17),
    ('Algeria', 18),
    ('Sudan', 25),
    ('Ukraine', 75),
    ('Iraq', 93),
    ('Afghanistan', 60),
    ('Poland', 124),
    ('Canada', 4),
    ('Morocco', 83),
    ('Saudi Arabia', 16),
    ('Uzbekistan', 79),
    ('Peru', 26),
    ('Angola', 26),
    ('Malaysia', 99),
    ('Mozambique', 40),
    ('Ghana', 137),
    ('Yemen', 56),
    ('Nepal', 203),
    ('Venezuela', 32),
    ('Madagascar', 48),
    ('Cameroon', 56),
    ('Côte d''Ivoire', 83),
    ('North Korea', 214),
    ('Australia', 3),
    ('Niger', 19),
    ('Taiwan', 673),
    ('Sri Lanka', 341),
    ('Burkina Faso', 76),
    ('Mali', 17),
    ('Romania', 84),
    ('Malawi', 203),
    ('Chile', 26),
    ('Kazakhstan', 7),
    ('Zambia', 25),
    ('Guatemala', 167),
    ('Ecuador', 71),
    ('Syria', 95),
    ('Netherlands', 508),
    ('Senegal', 87),
    ('Cambodia', 95),
    ('Chad', 13),
    ('Somalia', 25),
    ('Zimbabwe', 38),
    ('Guinea', 53),
    ('Rwanda', 525),
    ('Benin', 108),
    ('Burundi', 463),
    ('Tunisia', 76),
    ('Bolivia', 11),
    ('Belgium', 383),
    ('Haiti', 414),
    ('Cuba', 106),
    ('South Sudan', 18),
    ('Dominican Republic', 225),
    ('Czech Republic (Czechia)', 139),
    ('Greece', 81),
    ('Jordan', 115),
    ('Portugal', 111),
    ('Azerbaijan', 123),
    ('Sweden', 25),
    ('Honduras', 89),
    ('United Arab Emirates', 118),
    ('Hungary', 107),
    ('Tajikistan', 68),
    ('Belarus', 47),
    ('Austria', 109),
    ('Papua New Guinea', 20),
    ('Serbia', 100),
    ('Israel', 400),
    ('Switzerland', 219),
    ('Togo', 152),
    ('Sierra Leone', 111),
    ('Hong Kong', 7140),
    ('Laos', 32),
    ('Paraguay', 18),
    ('Bulgaria', 64),
    ('Libya', 4),
    ('Lebanon', 667),
    ('Nicaragua', 55),
    ('Kyrgyzstan', 34),
    ('El Salvador', 313),
    ('Turkmenistan', 13),
    ('Singapore', 8358),
    ('Denmark', 137),
    ('Finland', 18),
    ('Congo', 16),
    ('Slovakia', 114),
    ('Norway', 15),
    ('Oman', 16),
    ('State of Palestine', 847),
    ('Costa Rica', 100),
    ('Liberia', 53),
    ('Ireland', 72),
    ('Central African Republic', 8),
    ('New Zealand', 18),
    ('Mauritania', 5),
    ('Panama', 58),
    ('Kuwait', 240),
    ('Croatia', 73),
    ('Moldova', 123),
    ('Georgia', 57),
    ('Eritrea', 35),
    ('Uruguay', 20),
    ('Bosnia and Herzegovina', 64),
    ('Mongolia', 2),
    ('Armenia', 104),
    ('Jamaica', 273),
    ('Qatar', 248),
    ('Albania', 105),
    ('Puerto Rico', 323),
    ('Lithuania', 43),
    ('Namibia', 3),
    ('Gambia', 239),
    ('Botswana', 4),
    ('Gabon', 9),
    ('Lesotho', 71),
    ('North Macedonia', 83),
    ('Slovenia', 103),
    ('Guinea-Bissau', 70),
    ('Latvia', 30),
    ('Bahrain', 2239),
    ('Equatorial Guinea', 50),
    ('Trinidad and Tobago', 273),
    ('Estonia', 31),
    ('Timor-Leste', 89),
    ('Mauritius', 626),
    ('Cyprus', 131),
    ('Eswatini', 67),
    ('Djibouti', 43),
    ('Fiji', 49),
    ('Réunion', 358),
    ('Comoros', 467),
    ('Guyana', 4),
    ('Bhutan', 20),
    ('Solomon Islands', 25),
    ('Macao', 21645),
    ('Montenegro', 47),
    ('Luxembourg', 242),
    ('Western Sahara', 2),
    ('Suriname', 4),
    ('Cabo Verde', 138),
    ('Maldives', 1802),
    ('Malta', 1380),
    ('Brunei', 83),
    ('Guadeloupe', 237),
    ('Belize', 17),
    ('Bahamas', 39),
    ('Martinique', 354),
    ('Iceland', 3),
    ('Vanuatu', 25),
    ('French Guiana', 4),
    ('Barbados', 668),
    ('New Caledonia', 16),
    ('French Polynesia', 77),
    ('Mayotte', 728),
    ('Sao Tome & Principe', 228),
    ('Samoa', 70),
    ('Saint Lucia', 301),
    ('Channel Islands', 915),
    ('Guam', 313),
    ('Curaçao', 370),
    ('Kiribati', 147),
    ('Micronesia', 164),
    ('Grenada', 331),
    ('St. Vincent & Grenadines', 284),
    ('Aruba', 593),
    ('Tonga', 147),
    ('U.S. Virgin Islands', 298),
    ('Seychelles', 214),
    ('Antigua and Barbuda', 223),
    ('Isle of Man', 149),
    ('Andorra', 164),
    ('Dominica', 96),
    ('Cayman Islands', 274),
    ('Bermuda', 1246),
    ('Marshall Islands', 329),
    ('Northern Mariana Islands', 125),
    ('Greenland', 0),
    ('American Samoa', 276),
    ('Saint Kitts & Nevis', 205),
    ('Faeroe Islands', 35),
    ('Sint Maarten', 1261),
    ('Monaco', 26337),
    ('Turks and Caicos', 41),
    ('Saint Martin', 730),
    ('Liechtenstein', 238),
    ('San Marino', 566),
    ('Gibraltar', 3369),
    ('British Virgin Islands', 202),
    ('Caribbean Netherlands', 80),
    ('Palau', 39),
    ('Cook Islands', 73),
    ('Anguilla', 167),
    ('Tuvalu', 393),
    ('Wallis & Futuna', 80),
    ('Nauru', 541),
    ('Saint Barthelemy', 470),
    ('Saint Helena', 16),
    ('Saint Pierre & Miquelon', 25),
    ('Montserrat', 50),
    ('Falkland Islands', 0),
    ('Niue', 6),
    ('Tokelau', 136),
    ('Holy See', 2003);
/* Créer une fonction SQL qui retourne le pays (sous format de TABLE) qui correspond au critère passé en paramètre.
Ce paramètre est le nom du pays */
CREATE OR REPLACE FUNCTION get_country_by_name(name) RETURNS TABLE (
    density INT) AS '
	SELECT density
	FROM country
	WHERE country = $1;
' LANGUAGE SQL;
/* Créer une procédure SQL qui insert un nouveau pays avec des données random (on précise uniquement le pays) */
CREATE OR REPLACE PROCEDURE insert_data(country VARCHAR)
    AS '
    INSERT INTO country VALUES (country, random());
    ' LANGUAGE SQL;
/* Configurer un trigger qui va mettre à jour la colonne de la table correspondant à la date de l'insertion */
ALTER TABLE country
    ADD COLUMN created_at TIMESTAMP;
CREATE OR REPLACE FUNCTION created_at_update() RETURNS TRIGGER AS $$
    BEGIN
    NEW.created_at := NOW();
    RETURN NEW;
    END;
$$ LANGUAGE PLPGSQL;
DROP TRIGGER IF EXISTS created_at ON country;
CREATE TRIGGER created_at
    BEFORE INSERT ON country
    FOR EACH ROW
    EXECUTE PROCEDURE created_at_update();
/* Réaliser une fonction ou procédure stoquée pour retourner les pays qui sont regroupés par 4 tranches (à definir) de
densité de population */
CREATE OR REPLACE FUNCTION get_country_by_quartile_density() RETURNS TABLE (
    country VARCHAR, density INT, quartile INT) AS '
	SELECT country, density, NTILE(4)
    OVER(ORDER BY density)
    FROM country;
' LANGUAGE SQL;
